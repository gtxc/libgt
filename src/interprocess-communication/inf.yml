processes:
  a process is a program in execution
  a program is a file containing the information of a process
    when you start execution of the program, it is loaded into RAM and starts executing
  each process has its own address space and (usually) one thread of control
  you can have multiple processes executing the same program
    but each process has its own copy of the program within its own address space and executes it
      independently of the other copies
  processes are organized hierarchically
    each process has a parent process which explicitly arranged to create it
  the processes created by a given parent are called its child processes
    a child inherits many of its attiributes from the parent process
  a system call is a request for service that a program makes of the kernel (the brain f the OS)
    the service is generally something that only the kernel has the privilege to do
    sometimes called kernel calls
  programmers do not normally need to be concerned with system calls because there are functions
    in the GNU C library to do virtually everthing that system calls do
    these functions work by making system calls themselves
  each process is identified with a unique positive integer calles a process ID (PID)
  the system call getpid() returns the process ID of the calling process
    this call is always successful and thus no reurn value to indicate an error
  #include <sys/types.h>
  #include <unistd.h>
  pid_t getpid(void);
  the system call getppid() returns the Parent PID of the calling process

interprocess communication:
  a process can be of two types
    independent process
      not affected by the execution of other processes
      does not interact with other programs
    co-operating process
      affected by other executing processes
      can be used for increasing computational speed, convenience and modularity
  what if you wnat to send specific data to a process or read its output?
  interprocess communication lets processes work together
    programs can be much more powerful by lettng them talk to other programs on your system
    often referred to as IPC
  to reiterate, each process has its own adress space
  if any process wants to communicate with some information from its own address space to other processes
    it is only possible with IPC techniques
  the communication between multiple processes can be seen as a method of co-operation between them
  communication can be of two types
    between related processes initiating from only one process, such as parent and child processes
    between unrelated processes, or two or more different processes
  a process can communicate with another process in many different ways
  pipes (same process):
    first process communicates with the second process, allows flow of data in one direction only (half duplex)
  named pipes (different processes, FIFO):
    the first proces can communicate with the second process and vice versa at the same time (full duplex)
  message queues:
    process will communicate with eact other by posting a message and retrieving it out of a queue (full duplex)
  shared memeory:
    communication between two or more processes is achieved through a shared piece of memory among all processes
  sockets:
    mostly used to communicate over a network between a client and a server
  signals:
    communication between multiple processes by way of signaling
    a source process will send a signal (recognized by number) and the destination process will handle it accordingly

  pipes (named and anonymous) (detailed):
    a pipe is a communication mechanism betwen two or more related or interrelated procses
      can be either within one process or a communication between the child and the parent processes
    communication can also be multi-level such as communication between the parent, the child and the grand-child, etc.
    can be thought of filling water with the pipe into some container, say a bucket, and someone retrieving it,
      say with a mug
    implies that one output (water) is input for the other (bucket)
    another name for a named pipe is FIFO
    system calls are used for creating and using pipes
    steps to utilize pipes for IPC are:
      create pipe
      send a mesage to the pipe
      retieve the message from the pipe and write it to the standard output
      send another message to the pipe
      retieve the message from the pipe and write it to the standard output

  message queues (detailed):
    all processes can exchange information through access to a common system message queue
    message queues are a sort-of mix between signals and sockets
      allows you to create a data stream of messages which can allow one or multiple processes to
        communicate between them
      sending and receiving can be achieved by using a simple function
    the sending process places a message (via some (OS) message passing module) onto a queue which can
      be read by another process
      each message is given an identification or type so that processes can select the appropriate message
      process must share a common key in order to gain access to the queue in the first place
    system calls are used for creating and using message queues
    to perform communication using message queues, follow the below steps:
      the ftok() function is used to generate a unique key
      create a message queue or connect to an already existing message queue (msgget())
      write into message queue (msgsnd())
      read from the message queue (msgrcv())
      perform control operations on the message queue (msgctl())

  shared memory (detailed):
    shared memory is memory shared between two or more processes
    communication is done via this shared memory where changes made by one process can be viewed by another process
    communication between processes requires processes to share some variable and it completely depends on how
      programmer will implement it
    system calls allow you to create a memory segment which can be accessed and modified by multiple processes
      setting it up is easy (and similar to Message Queues)
      managing the given data segment might be the only tricky part
        you have to care about race conditions and deadlocks
    to perform communication using shared memory, follow the steps:
      create shared memory segment or use an already created shared memory segment (shmget())
      attach the process to the already created shared memory segment (shmat())
      detach the process from the already attached shared memory segment (shmdt())
      control operations on the shared memory segment (shmctl())

  SIGNALS (detailed):
    signals are limited form of inter-process communication (IPC), typically used in Unix-like OS-es
      a notification to a process indicating the occurrence of an event
    signals are a way to communicate information to a process about the state of other processes, the OS
      and hardware, so that process can take appropriate action
    signals are generated by the system or the user can also generate the signal programmatically
    when a signal is sent, the OS interrupts the target process' normal flow of execution to deliver the signal
    a process can receive a particular signal asynchronously (at any time)
      after receiving the signal, the process will interrupt its current operations
        the process has to stop whatever it is doing and go deal with the signal
          it will either handle or ignore the signal, or in some cases terminate
    there are fix set of signals that can be sent to a process defined by the operating system
    a signal is just a short message which contain a single integer value 
    when we are working in the shell and wish to "kill all cat programs" we type the command
      killall cat - sends a signal to all processes named cat that says "terminate" (SIGTERM)
    signals are also used in the context of erminal signaling which is how programs stop, start and terminate
      typing ctrl+c that is the same as sending SIGINT signal
      typing ctrl+z that is the same as sending SIGSTOP signal
      typing fg or bg that is the same as sending SIGCONT signal
    when a program calls the fgets() function
      the operating system reads the data from the keyboard, and when it sees the user hit ctrl+c
        sends an interrupt signal to the program
    some other signal events include
      illegal instructions, segmentation violations, termination orders from the operating system
      floating-point exceptions (divison by zero or multiplying large floating-point values)
    whenever a signal is raised (either programmatically or system generated signal), a default action
      is performed for some signals
    Term - the process will terminate
    Core - the process will terminate and produce a core dump file that traces the process state at the
      time of termination
    Ign - the process will ignore the signal
    Stop - the process will stop, like with a ctrl+z
    Cont - the process will continue from being stopped
    kill -l - to list all the signals
    raising a signal:
      signals can be generated by a user programmatically in addition to be sent by the OS
      the signal handling library (<signal.h>) provides the capability to raise specific signals
      a signal can be generated by calling raise() or kill() system calls
        raise(): sends a signal to the current process
        kill(): sends a signal to a specidif process
        after raising the signal, the execution of the current process is stopped
      alarm(): the alarm function provides a mechanism for a process to interrupt itself in the future
        sets a timer, when the timer expires, the process receives a signal (SIGALARM)
        if we ignore or do not catch this signal the process is terminated
        the default action is for SIGALARM is to terminate the process
        there is only one alarm clock per process
        the alarm() function will return a value if another alarm has been previously set
    handling a signal:
      it is to possible to handle or catch almost all signals in your program
      sometimes you need to run your own code when receiving a signal (handle/catch)
        maybe your process has files or network connections open
          it might want to close things down and tidy up before exiting
      it is also possible to ignore almost all signals
        neither performing the default action nor handling the signal
      a few signals cannot be ignored or handled/caught
        SIGKILL, SIGABRT, and SIGSTOP (which is why "kill 9" is the ultimate kill statement)
      signal handling can be done in two different ways through system calls
        signal() or sigaction()
      signal():
        used to tell the OS which funtion it should call when a signal is sent to o process
        the function is used to deal with (or handle) signal that is sent to it
        if you have a function called foo() that you want the OS to call when someone send an
          interrupt signal to your process
          you need pass the function name foo to the signal function as a parameter
          the function foo() is called the handler
        handlers are intended to be shor, fast pieces of code
          they should do just enough to deal with the signal that has been received
        the signal function receives two arguments
          an interger signal number and a pointer to the signal handling function
        the signal function returns
          on success return the address of a function that takes an integer argument and has no return value
          on error returns SIG_ERR
      sigaction():
        is essentially a function wrapper, a struct that contains a pointer to a function
        sigactions are used to tell the OS which function it should call when a signal is sent to a process
          the function is used to deal with (or handle) a signal that is sent to it
        if you have function called foo() that you want the OS call when someone sends an interrupt signal
          to your process
          you need to wrap to foo() function up as a sigaction
          the function foo() is called the handler
        handlers are intended to be short, fast pieces of code
          they should do just enough to deal with the signal that has been received
        sigaction() takes three parameters
          the signal number: the integer value of the signal you want to handle
          the new action: this is the address of the new sigacton you want to register
          the old action: if you pass a pointer to another sigaction, it will be filled with details of the
            current handler that you are about to replace
            if you do not care about the existing signal handler, you can set this to NULL
          will return -1 if it fails and will also set the errno variable
            you should always check for errors in your own code

fork() system call:
  in multitasking OS, processes (running programs) need a way to create new processes
    a new process is ofter needed to run other programs or to run a different branch of the existing program
  the fork() system call is a function where a process creates a copy of itself
    creates a new process
    defined in <unistd.h>
  when a process calls fork, it is deemed the parent process and the newly created process is its child
  the child process has an exact copy of all the memory segments of the parent process
    the fork operation creates a separate address space for the child
      updating a variable in one process will not affect the other
  fork() is often used with the exec() systam call in order to start the execution of a different program
  a typical use case is that a process wil first invoke the fork function to create a copy of itself
    then, the copy (child process), calls the exec system call to overlay itself with the other program
      it ceases execution of its former program in favor of the other
  after a new child process is created, both processes will execute the next instruction following fork() system call
    child and parent processes run in parallel
      we have to distinguish the parent from the child
        this can be done by testing the return value of fork()
  the fork() function does nto take any parameters and returns a process ID
  pid = fork();
  the returned process ID is the pid_t defined in <sys/types.h>
    the process ID is an integer
    a process use can use function getpid() to retrieve the process ID assigned to this process
  in the subsequent blocks of code you need to check the value of pid
    returns a negative value when the creation of a child process was unsuccessful
    returns a zero value to the newly created child process
    return a positive value, the process ID of the child process, to the parent
  when we test the value of pid to find whether it is equal to zero or greater than it we are
    effectively finding out whether we are in the child process or the parent process
