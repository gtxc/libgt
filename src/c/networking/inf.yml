programs on different machines often need to talk each other
most networked applications need two separate programs, a server and a client
TCP protocol:
  Transmission Control Protocol is a standard that defines how to establish and maintain a network
    conversation through which application programs can exchange data
  TCP works with the Internet Protocol (IP), which defines how computers send packets of data to each other
  together, TCP and IP are the basic rules defining the Internet
    all major Internet applications such as the www, email, remote administration, and file transfer rely on TCP
  TCP is a connection-oriented protocol
    means a connection is established and maintained until the application programs at each end have
      finished exchanging messages
  TCP creates a connection between the source and destination node before transmitting the data and
    keeps the connection alive until the communication is no longer active
features of a TCP connection:
  connection oriented
  reliability
  handles lost packets
  handles packet sequencing
  handles duplicated packets
  full duplex (write/read both ways)
  flow control
  congestion control
client/server model:
  is a relationship in which one program (the client) requests a service or resource from another program (the server)
    two processes or two applications that communicate with each other to exchange some information
    one of the two processes acts as a client proces, and another process acts as a server
    there can be multiple clients that talk to one server
  clients typically communicate with servers by using the TCP/IP protocol suite
  computer transactions in which the server fulfills a request made by a client are very common
    the client-server model has become one of the central ideas of network computing
  the client establishes a connection to the server over a local area network (LAN) or wide-area network
    (WAN), such as the Internet
    clients need to know the address of the server, but the server does not need to know the address
      or even the existence of the client prior to the connection being established
  once the server has fulfills the client's request, the connection is terminated
  because multiple client programs share the services of the same server program, a special server called
    a daemon may be activated just to await client requests
  the server process is takes a request from one or more clients
  after getting a request from the client, this process will perform the required processing, gather the
    requested information, and send it to the requestor client
  once done, it becomes ready to serve another client
  server processes are always alert and ready to serve incoming requests
  an example of a server process would be a web server
    keeps waiting for requests from internet browsers and as soon as it gets any request from a browser,
      it picks up a reuqested HTML page and sends it back to that browser
  types of servers:
    iterative server:
      the simplest form of a server where the server process serves one client at a time
      after completing the first request, it takes request from another client
      other client wait until it is their turn
    concurrent server:
      this type of server runs multiple concurrent processes to server many requests at a time
      one process may take longer and another client does not need to wait too long
      the simplest way to write a concurrent server under Unix is to fork a child process to handle
        each client separately
sockets:
  are the "virtual" endpoints of any kind of network communications done between two computers
  socket programming is a way of connecting two nodes on a network to communicate with each other
  one sokcet (node) listens on a particular port at an address
  another socket reaches out to the other to form a connection
  server forms the listener socket while client reaches out to the server
  when you type www.google.com in your web browser
    it opens a socket and connects to google.com to fetch the page and show it to you
    same with any chat client like gtalk or skype
  all network communication goes through a socket
  sockets are supported by Unix, windows, mac, and many other OS
  steps in using sockets to communicate:
    create a new socket for network communication
    attach a local address to a socket (bind)
    announce willingness to accept connections (listen)
    block caller until a connection request arrives (accept)
    actively attempt to establish a connection (connect)
    send some data over connection (send)
    receive some data over connection (receive)
    release the connection (close)
the sockets API:
  the following header files need to be included to work with sockets for network communication
    include system calls for sockets and socket data
  <sys/types.h>
    contains definitions of a number of data types used in socket calls
  <sys/socket.h>
    the main socket header file
    includes a number of definitions of structers needed for sockets (socket creation, accept,
      listen, bind, send, recv, etc..)
  <netinet/in.h>
    contains constants and structures needed for internet domain addresses
  <netdb.h>
    defines the structure hostnet
  <arpa/inet.h>
    defines in_addr structure
ports:
  a computer might need to run several server programs at once
    might be sending out web pages, posting email, and running a chat server all at the same time
  to prevent the different conversations from getting confused, each server uses a different port
  a prot is just like a channel on a TV
    different ports are used for different network services, just like different channes are used
      for different content
  a port will be defined as an integer number between 1024 and 65535
    port numbers smaller than 1024 are considered well-known system ports (telnet uses port 23, http
      uses 80, ftp uses 21) (do not use these)
  the port assignments to network services can be found in the file /etc/services
  if you writing your own server then care must be taken to assign a port to your server
    you should make sure that this port should not be assigned to any other server
port and service functions:
  the following functions are provided to fetch service name from the /etc/services file
  struct servent *getservbyname(char *name, char *proto);:
    takes a service name and a protocol name and returns the corresponding port number for that service
  struct servent *getservbyport(int port, char *proto);:
    takes a port number and a protocol name and returns the corresponding service name
  the return value for each function is a pointer to a structure
  struct servent {
      char *s_name;
      char **s_aliases;
      int s_port;
      char *s_proto;
  };
IP address functions:
  the below functions are for IP address functionality
  int inet_aton(const char *strptr, struct in_addr *addrptr);:
    converts the specified string, in the internet standard dor notation, to a network address, and
      stores the address in the structure provided
  in_addr_t inet_addr(const char *strptr);:
    converts the specified string, in the internet standard dot notation, to an integer value
      suitable for use as an internet address
  char *inet_ntoa(struct in_addr inaddr);:
    converts the specified internet host address to a string in the internet standard dot notation
structures used for support of the main functions for sockets:
  various structures are used in socket programming to hold information about the address and port,
    and other information
  socket address structures are an integral part of every network program, most sockt functions require
    a pointer to a socket address structure as an argument
  when a socket function fills in a structure, the length is also passed by reference, so that its
    value can be updated by the function
  always set the structure variables to NULL, otherwise it may get unexpected junk values in your structure
  socketaddr:
    is a structure that holds the socket information
      this is a generic socket address structure, which will be passed in most of the socket function calls
    struct sockaddr {
        unsigned short sa_family;
        char sa_data[14];
    };
    sa_family can be the following, AF_INET, AF_UNIX, AF_NS, AF_IMPLINK
      represents an address family
      in most of the internet-based applications, we use AF_INET
    sa_data is a protocol-specific address
      we will use prot number IP address, which is represented by sockaddr_in structure
  sockaddr_in:
    is a structure that helps you to reference to the socket's elements
    struct sockaddr_in {
        short int sin_family;
        unsigned short int sin_port;
        struct in_addr sin_addr;
        unsigned char sin_zero[8];
    };
    in addr is used only in the above structure as a structure field and holds the 32 bit nedit/hostid
    struct in_addr {
        unsigned long s_addr;
    };
  hostent:
    is a structure is used to keep information related to host
    struct hostent {
        char *h_name;
        char **h_aliases;
        int h_addrtype;
        int h_length;
        char **h_addr_list;
    #define h_addr h_addr_list[0]
    };
sockets versus file I/O:
  working with sockets is very similar to working with files
  the socket() and accept() functions both return handles (file dscriptor)
    reads and writes to the sockets requires the use of these handles (file descriptors)
  in Linux, sockets and file descriptors also share the same file descriptor table
  sockets have addresses associated with them whereas file do not
  you cannot randomly access as socket like you can a file with lseek()
  sockets must be in the correct state to perform input or output
socket functions:
  the most common/important functions are the following
    sokcet()
    connect()
    bind()
    listen() and accept()
    read(), recv(), recvfrom(), or recvmsg()
    write(), send(), sendto(), or sendmsg()
    close()
  most of the functions are used by both the client and the server with the exception of
    bind() is used particularly by server programs
    connect() by client programs
  all of the above functions need to include <sys/types.h> and <sys/socket.h> except for
    read/write/close which are defined in <unistd.h>
  socket():
    to perform network I/O, the first thing a process mst do is call the socket function
      specifying the type of communication protocol desired and protocol family
    int socket(int family, int type, int protocol);
    family specifies the protocol family and is usually the constant AF_INET for IPv4 protocols
      and AF_INETc for IPv6 protocols
    type specifies the kind of socket you want, and this is usually set to SOCK_STREAM for a stream
      socket or SOCK_DGRAM for a datagram socket
    protocol is the third and should be set to the specific protocol type you are using
      IPPROTO_TCP - TCP transport protocol
      IPPROTO_UDP - UDP transport protocol
      IPPROTO_SCTP - SCTP transport protocol
    returns  a socket descriptor that you can use in later system calls or -1 on error
  setsockopt():
    functions helps in manipulating options for the socket referred to by the file
      descriptor sockfd
      completely optional, but it helps in reuse of address and port
      prevents error such as "address already in use"
    int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);
  connect():
    is used by a TCP client to establish a connection with TCP server
    int connect(int sockfd, struct sockaddr *serv_addr, int addrlen);
    sockfd is a socket descriptor returned by the socket function
    serv_addr is a pointer to struct sockaddr that contains destination IP address and port
    addlen is set to sizeof (struct sockaddr)
    returns 0 if it successflly connects to the server, otherwise it returns -1 on error
  bind():
    when a server starts up, it needs to tell the OS which port it is going to use
      called binding the port
    once a server program has created a socket and named it with bind() giving it an IP addres and
      port number, should any program anywhere on the network give that same to the connect() function,
      that program will find the server program and they will link up
    int bind(int sockfd, struct sockaddr *my_addr, int addrlen);
    sockfd is a socket descriptor returned by the socket function
    my_addr is a pointer to struct sockaddr that contains the local IP address and port
      a 0 value for port numbrer means that the system will choose a random port, and INADDR_ANY value
        for IP address means the server's IP adres will be assgined automatically
    server.sin_port = 0;
    server.sin_addr.s_addr = INADDR_ANY;
    addrlen is set to sizeof (struct sockaddr)
    returns 0 if it successfully binds to the address, otherwise it return -1 on error
  listen():
    if your server becomes popular, you will probably get lots of clients connecting to it at once
    the listen() system call tells the OS how long you wnat the queue to be 
    calling listen() with a queue length of 10 means that up to 10 clients can try to connect to the
      server at once
      they will not all be immediately answered, but they will be able to wait
      the 11th client will be told the server is too busy
    the listen function is called only by a server
    int listen(int sockfd, int backlog);
    sockfd is a socket descriptor returned by the socket function
    backlog is the max number of allowed connections
    return 0 on success, otherwise it returns -1 on error
  accept():
    once you have bound a port and set up a listen queue, you then just have to wait
    servers spend most of their lives waiting for clients to contact them
    the accept() system call waits untl a client contact the server, and then it returns a
      second socket descriptor that you can use to hold a conversation on
    int accept(int sockfd, struct sockaddr *cliaddr, socklen_t *addrlen);
    sockfd is a socket descriptor returned by the socket function
    cliaddr is pointer to struct sockaddr that contains client IP address and port
    addrlen should be set to sizeof (struct sockaddr)
    returns a non-negative descriptor on success, otherwise it returns -1 on error
      all read-write operations will be done on this descriptor to communicate with the client
  recv():
    is used to receive data over stram sockets or connected datagram sockets
      if you wnat to receive data over unconnected datagram socket you must use recvfrom()
    int recv(int sockfd, void *buf, int len, unsigned int flags);
    sockfd is a socket descriptor returned by the socket function
    buf is the buffer to read the information into
    len is the maximum length of the buffer
    flags is set to 0
    return the number of btyes read into the buffer, otherwise it will return -1 on error
  recvfrom():
    is used to receive data from unconnected datagram sockets
    int recvfrom(int sockfd, void *buf, int len, unsigned int flags, struct sockaddr *from, int *fromlen);
    sockfd is a socket descriptor returned by the socket function
    buf is the buffer to read the information into
    len is the maximum length of the buffer
    flags is set to 0
    from is a pointer to struct sockaddr for the host where dat ahas to be read
    fromlen should be set it to sizeof (struct sockaddr)
    return the number of bytes read into the buffer, otherwise it returns -1 on error
  write():
    attempts to write nbyte bytes from the buffer pointed by buf to the file associated with
      the open file descriptor, fildes
    int write(int fildes, const void *buf, int nbyte);
    fildes is a socket decriptor return by the socket function
    buf is a pointer to the data you wnat to send
    nbyte is the number of bytes to be written
      if nbyte is 0, write() will return 0 and have no other results if the file s a regular file
      otherwise, the results are unspecified
    return the number of bytes actually written to the file associated with fildes if successful
      otherwise, -1 is returned
  send():
    is used to send data over stream sockets or connected datagram sockets
      if you want to send data over unconnected datagram sockets, you must use sendto() function
    int send(int sockfd, const void *msg, int len, int flags);
    sockfd is a socket descriptor returned by the socket function
    msg is a pointer to the data you want to send
    len is the length of the data you want to send (in bytes)
    flags should be set to 0
    returns the number of bytes sent out, otherwise it will return -1 on error
  sendto():
    is used to send data over unconnected datagram sockets
    int sendto(int sockfd, const void *msg, int len, unsigned int flags, const struct sockaddr *to, int tolen);
    sockfd is a socket descriptor returned by the socket function
    msg is a pointer to the data you want to send
    len is the length of the data you want to send (in bytes)
    flags should be set to 0
    to is a pointer to struct sockaddr for the host where data has to be sent
    tolen should be set it to sizeof (struct sockaddr)
    returns the number of bytes sent out, otherwise it will return -1 on error
  read():
    attempts to read nbyte bytes from the file associated with the buffer, fildes, into the buffer
      pointed to by buf
    int read(int fildes, const void *buf, int nbyte);
    fildes is a socket descriptor returned by socket function
    buf is the buffer to read the information into
    nbyte is the number of bytes to read
    return the number of bytes actually written to the file associated with fildes, if successful
      otherwise, -1 is returned
  close():
    is used ot close the communication between the client and the server
    int close(int sockfd);
    sockfd is a socket descriptor returned by socket function
    return 0 on success, otherwise it returns -1 on error
  shutdown():
    is used to gracefully close the communication between the client and the server
      gives more control in comparison to the close function
    int shutdown(int sockfd, int how);
    sockfd is a socket descriptor returned by socket function
    how
      0 - indicates that receiving is not allowed
      1 - indicates that sending is not allowed
      2 - indicates that both receiving and sending are not allowed
        when how is set to 2, it is the same thing as close()
    returns 0 on success, otherwise it returns -1 on error
steps specifically for a server socket:
  create a socket with the socket() system call
  bind the socket to an address using the bind() system call
    for a server socket on the internet, an address consist of a port number on the host machine
  listen for connections with the listen() system call
  accept a connection wth the accept() system call
    typically blocks the connection until a client connects with the server
  send and receive data using the read()/recv() and write()/send() system calls
steps specifically for client socket:
  create socket with the socket() system call
  connect the socket to the address of the server using the connect() system call
  send and receiv data
    there are a number of ways to do this, but the simplest way is to use the read()/recv() and
      write()/send() system calls